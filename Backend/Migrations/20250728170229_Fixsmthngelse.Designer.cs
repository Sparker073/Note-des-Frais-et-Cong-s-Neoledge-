// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonBackend.Data;

#nullable disable

namespace MonBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250728170229_Fixsmthngelse")]
    partial class Fixsmthngelse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonBackend.Models.DemandeCongé", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CommentaireManager")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDemande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("EnAttente");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "DateDebut", "DateFin")
                        .HasDatabaseName("IX_DemandeCongé_UserDateRange");

                    b.ToTable("DemandesCongés");
                });

            modelBuilder.Entity("MonBackend.Models.JourFerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique()
                        .HasDatabaseName("IX_JourFerie_Date_Unique");

                    b.ToTable("JourFeries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jour de l'An"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fête de l'Indépendance"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fête des Martyrs"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fête du Travail"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fête de la République"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fête de la Femme"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fête de l'Évacuation"
                        });
                });

            modelBuilder.Entity("MonBackend.Models.LigneNoteFrais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistanceKm")
                        .HasColumnType("int");

                    b.Property<string>("JustificatifPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NoteDeFraisId")
                        .HasColumnType("int");

                    b.Property<int?>("TarifKmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteDeFraisId");

                    b.HasIndex("TarifKmId");

                    b.ToTable("LignesNotesFrais");
                });

            modelBuilder.Entity("MonBackend.Models.NoteDeFrais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateSoumission")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjetId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("commentaireMananger")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjetId");

                    b.HasIndex("UserId");

                    b.ToTable("NotesDeFrais");
                });

            modelBuilder.Entity("MonBackend.Models.Projet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("MonBackend.Models.TarifKm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategorieVehicule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TarifParKm")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TarifsKm");
                });

            modelBuilder.Entity("MonBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Poste")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldeCongesAnnuel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MonBackend.Models.DemandeCongé", b =>
                {
                    b.HasOne("MonBackend.Models.User", "Employe")
                        .WithMany("DemandesConge")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("MonBackend.Models.LigneNoteFrais", b =>
                {
                    b.HasOne("MonBackend.Models.NoteDeFrais", "NoteDeFrais")
                        .WithMany("Lignes")
                        .HasForeignKey("NoteDeFraisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonBackend.Models.TarifKm", "TarifKm")
                        .WithMany()
                        .HasForeignKey("TarifKmId");

                    b.Navigation("NoteDeFrais");

                    b.Navigation("TarifKm");
                });

            modelBuilder.Entity("MonBackend.Models.NoteDeFrais", b =>
                {
                    b.HasOne("MonBackend.Models.Projet", "Projet")
                        .WithMany("NotesDeFrais")
                        .HasForeignKey("ProjetId");

                    b.HasOne("MonBackend.Models.User", "Employe")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employe");

                    b.Navigation("Projet");
                });

            modelBuilder.Entity("MonBackend.Models.User", b =>
                {
                    b.HasOne("MonBackend.Models.User", "Manager")
                        .WithMany("Subordonnes")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MonBackend.Models.NoteDeFrais", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("MonBackend.Models.Projet", b =>
                {
                    b.Navigation("NotesDeFrais");
                });

            modelBuilder.Entity("MonBackend.Models.User", b =>
                {
                    b.Navigation("DemandesConge");

                    b.Navigation("Subordonnes");
                });
#pragma warning restore 612, 618
        }
    }
}
